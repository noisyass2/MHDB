"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
require("rxjs/add/operator/catch");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
require("rxjs/add/observable/throw");
var file_system_1 = require("tns-core-modules/file-system");
var shared_service_1 = require("../../shared/services/shared.service");
var WeaponsService = /** @class */ (function () {
    function WeaponsService(sharedService) {
        this.sharedService = sharedService;
        var appFolder = file_system_1.knownFolders.currentApp();
        var wetypefile = appFolder.getFile("shared/resources/weapontypes.json");
        var flatwetypefile = appFolder.getFile("shared/resources/flatweapons.json");
        var fullweaponfile = appFolder.getFile("shared/resources/weapons.json");
        // // let weakFile = appFolder.getFile("shared/resources/monsweak.json");
        // // console.log(armorsFile.readTextSync());
        this.weapontypes = JSON.parse(wetypefile.readTextSync());
        this.flatweapons = JSON.parse(flatwetypefile.readTextSync());
        this.weapons = JSON.parse(fullweaponfile.readTextSync());
    }
    WeaponsService.prototype.getWeaponTypes = function () {
        return this.weapontypes;
    };
    WeaponsService.prototype.getByType = function (weptype) {
        return this.flatweapons.filter(function (p) { return p.weapontype == weptype; });
    };
    WeaponsService.prototype.getWeaponByName = function (name) {
        var wpn = this.sharedService.findOne(this.weapons, "name", name);
        wpn.upgradeMats = wpn.items.filter(function (p) { return p.cat == "Upgrading mats"; });
        wpn.craftingMats = wpn.items.filter(function (p) { return p.cat == "Crafting mats"; });
        wpn.craftable = wpn.craftingMats.length > 0;
        wpn.upgradable = wpn.upgradeMats.length > 0;
        return wpn;
    };
    WeaponsService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [shared_service_1.SharedService])
    ], WeaponsService);
    return WeaponsService;
}());
exports.WeaponsService = WeaponsService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VhcG9ucy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VhcG9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBRzNDLG1DQUFpQztBQUNqQyxnQ0FBOEI7QUFDOUIsaUNBQStCO0FBQy9CLHFDQUFtQztBQUNuQyw0REFBMEQ7QUFDMUQsdUVBQXFFO0FBS3JFO0lBUUksd0JBQXFCLGFBQTJCO1FBQTNCLGtCQUFhLEdBQWIsYUFBYSxDQUFjO1FBQzVDLElBQUksU0FBUyxHQUFHLDBCQUFZLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDMUMsSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBQ3hFLElBQUksY0FBYyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUM1RSxJQUFJLGNBQWMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDeEUseUVBQXlFO1FBQ3pFLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUU3RCxDQUFDO0lBRU0sdUNBQWMsR0FBckI7UUFFSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUM1QixDQUFDO0lBRUQsa0NBQVMsR0FBVCxVQUFVLE9BQU87UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsVUFBVSxJQUFJLE9BQU8sRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCx3Q0FBZSxHQUFmLFVBQWdCLElBQUk7UUFDaEIsSUFBSSxHQUFHLEdBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEUsR0FBRyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxHQUFHLElBQUksZ0JBQWdCLEVBQXpCLENBQXlCLENBQUMsQ0FBQztRQUNuRSxHQUFHLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxlQUFlLEVBQXhCLENBQXdCLENBQUMsQ0FBQztRQUNuRSxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUM1QyxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQXJDUSxjQUFjO1FBRDFCLGlCQUFVLEVBQUU7eUNBUzBCLDhCQUFhO09BUnZDLGNBQWMsQ0F1QzFCO0lBQUQscUJBQUM7Q0FBQSxBQXZDRCxJQXVDQztBQXZDWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSHR0cCwgSGVhZGVycywgUmVzcG9uc2UgfSBmcm9tIFwiQGFuZ3VsYXIvaHR0cFwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL09ic2VydmFibGVcIjtcbmltcG9ydCBcInJ4anMvYWRkL29wZXJhdG9yL2NhdGNoXCI7XG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9kb1wiO1xuaW1wb3J0IFwicnhqcy9hZGQvb3BlcmF0b3IvbWFwXCI7XG5pbXBvcnQgXCJyeGpzL2FkZC9vYnNlcnZhYmxlL3Rocm93XCI7XG5pbXBvcnQge2tub3duRm9sZGVyc30gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvZmlsZS1zeXN0ZW1cIjtcbmltcG9ydCB7IFNoYXJlZFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3NlcnZpY2VzL3NoYXJlZC5zZXJ2aWNlXCI7XG5cblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgV2VhcG9uc1NlcnZpY2Uge1xuICAgIFxuICAgIFxuICAgIHB1YmxpYyB3ZWFwb250eXBlcztcbiAgICBwdWJsaWMgd2VhcG9udHlwZW5hbWVzO1xuICAgIHB1YmxpYyBmbGF0d2VhcG9ucztcbiAgICBwdWJsaWMgd2VhcG9ucztcblxuICAgIGNvbnN0cnVjdG9yIChwcml2YXRlIHNoYXJlZFNlcnZpY2U6U2hhcmVkU2VydmljZSkgeyBcbiAgICAgICAgbGV0IGFwcEZvbGRlciA9IGtub3duRm9sZGVycy5jdXJyZW50QXBwKCk7XG4gICAgICAgIGxldCB3ZXR5cGVmaWxlID0gYXBwRm9sZGVyLmdldEZpbGUoXCJzaGFyZWQvcmVzb3VyY2VzL3dlYXBvbnR5cGVzLmpzb25cIik7XG4gICAgICAgIGxldCBmbGF0d2V0eXBlZmlsZSA9IGFwcEZvbGRlci5nZXRGaWxlKFwic2hhcmVkL3Jlc291cmNlcy9mbGF0d2VhcG9ucy5qc29uXCIpO1xuICAgICAgICBsZXQgZnVsbHdlYXBvbmZpbGUgPSBhcHBGb2xkZXIuZ2V0RmlsZShcInNoYXJlZC9yZXNvdXJjZXMvd2VhcG9ucy5qc29uXCIpO1xuICAgICAgICAvLyAvLyBsZXQgd2Vha0ZpbGUgPSBhcHBGb2xkZXIuZ2V0RmlsZShcInNoYXJlZC9yZXNvdXJjZXMvbW9uc3dlYWsuanNvblwiKTtcbiAgICAgICAgLy8gLy8gY29uc29sZS5sb2coYXJtb3JzRmlsZS5yZWFkVGV4dFN5bmMoKSk7XG4gICAgICAgIHRoaXMud2VhcG9udHlwZXMgPSBKU09OLnBhcnNlKHdldHlwZWZpbGUucmVhZFRleHRTeW5jKCkpO1xuICAgICAgICB0aGlzLmZsYXR3ZWFwb25zID0gSlNPTi5wYXJzZShmbGF0d2V0eXBlZmlsZS5yZWFkVGV4dFN5bmMoKSk7XG4gICAgICAgIHRoaXMud2VhcG9ucyA9IEpTT04ucGFyc2UoZnVsbHdlYXBvbmZpbGUucmVhZFRleHRTeW5jKCkpO1xuXG4gICAgfVxuXG4gICAgcHVibGljIGdldFdlYXBvblR5cGVzKClcbiAgICB7XG4gICAgICAgIHJldHVybiB0aGlzLndlYXBvbnR5cGVzO1xuICAgIH1cblxuICAgIGdldEJ5VHlwZSh3ZXB0eXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsYXR3ZWFwb25zLmZpbHRlcihwID0+ICBwLndlYXBvbnR5cGUgPT0gd2VwdHlwZSk7XG4gICAgfVxuXG4gICAgZ2V0V2VhcG9uQnlOYW1lKG5hbWUpICB7XG4gICAgICAgIHZhciB3cG4gPSAgdGhpcy5zaGFyZWRTZXJ2aWNlLmZpbmRPbmUodGhpcy53ZWFwb25zLFwibmFtZVwiLG5hbWUpO1xuICAgICAgICB3cG4udXBncmFkZU1hdHMgPSB3cG4uaXRlbXMuZmlsdGVyKHAgPT4gcC5jYXQgPT0gXCJVcGdyYWRpbmcgbWF0c1wiKTtcbiAgICAgICAgd3BuLmNyYWZ0aW5nTWF0cyA9IHdwbi5pdGVtcy5maWx0ZXIocCA9PiBwLmNhdCA9PSBcIkNyYWZ0aW5nIG1hdHNcIik7XG4gICAgICAgIHdwbi5jcmFmdGFibGUgPSB3cG4uY3JhZnRpbmdNYXRzLmxlbmd0aCA+IDA7XG4gICAgICAgIHdwbi51cGdyYWRhYmxlID0gd3BuLnVwZ3JhZGVNYXRzLmxlbmd0aCA+IDA7XG4gICAgICAgIHJldHVybiB3cG47XG4gICAgfVxuXG59Il19